========== OVERVIEW OF TESTING EFFORTS ==========

Overall, I would say the most challenging part of unit testing the dominion.c functions
was coming up with test cases and mocked data to operate on. Sometimes it wasn't always
obvious what a given function should do under certain circumstances, and so it took some
thought to determine the expected behavior. Additionally, even though I have pretty high
coverage of the functions under test, it doesn't necessarily even mean they are operating
properly. It's nearly impossible to test them under every condition, which means they might
only operate properly under certain assumptions.



==================== COVERAGE ===================

unittest1.c - whoseTurn
* This unit test covers 100% of whoseTurn's lines (which is 1)
* This implies this function is pretty well covered by my unit test.

unittest2.c - handCard
* Thus unit test covers 100% of handCard's lines (which is 2)
* This implies this function is pretty well covered by my unit test.

unittest3.c - fullDeckCount
* This unit test covers 100% of fullDeckCount's lines (which is 11)
* This implies this function is pretty well covered by my unit test.

unittest4.c - updateCoins
* THis unit test covers 100 of updateCoins' lines (which is 14)
* This implies this function is pretty well covered by my unit test.

cardtest1.c - Cutpurse
* Coverage is difficult to measure since this is not a separate function. However, it's 
	coverage is included within the overall statistic.

cardtest2.c - Sea Hag
* Coverage is difficult to measure since this is not a separate function. However, it's 
	coverage is included within the overall statistic.

cardtest3.c - Smithy
* This unit test covers 100% of cardEffectSmithy's lines (which is 5)
* This implies this function is pretty well covered by my unit test.

cardtest4.c - Council Room
* This unit test covers 100% of cardEffectCouncilRoom's lines (which is 11)
* This implies this function is pretty well covered by my unit test.

Overall coverage of dominion.c (all tests combined)
* Lines executed: 30.17% of 643


============= USAGE AND SAMPLE OUTPUT =============

$ make clean unittestresults.out

BEGINNING TEST of whoseTurn
   + ASSERTION PASSED: Returns correct value in a good state. 
   - ASSERTION FAILED: Identifies when the value has become corrupt/invalid. (Too large)
   - ASSERTION FAILED: Identifies when the value has become corrupt/invalid. (Too small)
TEST FAILED - result: 1/3

TEST COVERAGE
Function 'whoseTurn'
Lines executed:100.00% of 1

-------------------------------------------

BEGINNING TEST of handCard
   + ASSERTION PASSED: Returns correct value in a good state. 
   - ASSERTION FAILED: Detects invalid game state. (Current player out of bounds)
   - ASSERTION FAILED: Detects invalid card index. (Card position out of bounds)
TEST FAILED - result: 1/3

TEST COVERAGE
Function 'handCard'
Lines executed:100.00% of 2

-------------------------------------------

BEGINNING TEST of fullDeckCount
   + ASSERTION PASSED: All cards are checked within deck/hand/discard.
   + ASSERTION PASSED: Counts only the desired card.
TEST SUCCESSFUL - result: 2/2

TEST COVERAGE
Function 'fullDeckCount'
Lines executed:100.00% of 11

-------------------------------------------

BEGINNING TEST of updateCoins
   + ASSERTION PASSED: Copper coins are counted.
   + ASSERTION PASSED: Silver coins are counted.
   + ASSERTION PASSED: Gold coins are counted.
   + ASSERTION PASSED: Only cards within hand are counted.
   + ASSERTION PASSED: Only cards for given player are counted.
TEST SUCCESSFUL - result: 5/5

TEST COVERAGE
Function 'updateCoins'
Lines executed:100.00% of 14

-------------------------------------------

BEGINNING TEST of cardEffect (Cutpurse)
   + ASSERTION PASSED: Game initialized.
   + ASSERTION PASSED: Coins incremented by 2.
   + ASSERTION PASSED: Copper is removed from another player's hand. (Player had only copper)
   + ASSERTION PASSED: Copper is removed from another player's hand. (Player had copper + another card)
   + ASSERTION PASSED: A player without copper remains untouched.
TEST SUCCESSFUL - result: 5/5

-------------------------------------------

BEGINNING TEST of cardEffect (Sea Hag)
   + ASSERTION PASSED: Game initialized.
   + ASSERTION PASSED: Player's deck remains untouched.
   + ASSERTION PASSED: Another player's top deck card was discarded. (One card in deck)
   + ASSERTION PASSED: Another player's top deck card was discarded. (Two cards in deck)
   + ASSERTION PASSED: Another player's top deck card is now curse. (One card in deck)
   + ASSERTION PASSED: Another player's top deck card is now curse. (Two cards in deck)
TEST SUCCESSFUL - result: 6/6

-------------------------------------------

BEGINNING TEST of cardEffect (Smithy)
   + ASSERTION PASSED: Game initialized.
   + ASSERTION PASSED: Player draws three cards (hand count += 2, since Smithy is removed).
   + ASSERTION PASSED: Player's smithy card is removed.
TEST SUCCESSFUL - result: 3/3

TEST COVERAGE
Function 'cardEffectSmithy'
Lines executed:100.00% of 5

-------------------------------------------

BEGINNING TEST of cardEffect (Council Room)
   + ASSERTION PASSED: Game initialized.
   + ASSERTION PASSED: Number of buys is increased by 1.
   + ASSERTION PASSED: Player draws 4 cards.
   + ASSERTION PASSED: Another player draws 1 card. (No cards in hand)
   + ASSERTION PASSED: Another player draws 1 card. (One card in hand)
TEST SUCCESSFUL - result: 5/5

TEST COVERAGE
Function 'cardEffectCouncilRoom'
Lines executed:100.00% of 11

-------------------------------------------

OVERALL COVERAGE of dominion.c
Lines executed:30.17% of 643